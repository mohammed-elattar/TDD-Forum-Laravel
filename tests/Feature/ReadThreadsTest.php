<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\Concerns\InteractsWithExceptionHandling;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;

class ReadThreadsTest extends TestCase
{
  use DatabaseMigrations;
  use InteractsWithExceptionHandling;
  public function setUp()
  {
    parent::setUp(); // TODO: Change the autogenerated stub
    $this->thread = create("App\Thread");
  }

  /**
   * @test
   */
  public function a_user_can_browse_threads()
  {
    $this->get('/threads')
      ->assertSee($this->thread->title);
  }

  /**
   *@test
   */
  public function a_user_can_read_single_thread()
  {
    $this->get($this->thread->path())
      ->assertSee($this->thread->title);
  }

  /**
   *@test
   */
  public function a_user_can_read_replies_that_are_associated_with_thread()
  {
    $reply = create("App\Reply",["thread_id" => $this->thread->id]);
    $this->get($this->thread->path())
      ->assertSee($reply->body);
  }
/**
   *@test
   */
  public function a_user_can_filter_threads_according_to_channel()
  {
    $this->withoutExceptionHandling();
    $channel = create('App\Channel');
    $threadInChannel = create('App\Thread',['channel_id'=>$channel->id]);
    $threadNotInChannel = create('App\Thread');

    $this->get('/threads/'.$channel->slug)
      ->assertSee($threadInChannel->title)
      ->assertDontSee($threadNotInChannel->title);
  }

    /**
     * @test
     */
    public function a_user_can_filter_threads_by_any_username()
    {
        $this->signIn(create('App\User',['name'=>'attar']));
        $threadByAttar = Create('App\Thread',['user_id'=>auth()->user()->id]);
        $threadNotByAttar = Create('App\Thread');

        $this->get('/threads?by=attar')
            ->assertSee($threadByAttar->title)
            ->assertDontSee($threadNotByAttar->title);

    }

}
