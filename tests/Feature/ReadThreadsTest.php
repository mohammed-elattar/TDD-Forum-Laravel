<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\Concerns\InteractsWithExceptionHandling;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;

class ReadThreadsTest extends TestCase
{
  use DatabaseMigrations;
  use InteractsWithExceptionHandling;
  public function setUp()
  {
    parent::setUp(); // TODO: Change the autogenerated stub
    $this->thread = create("App\Thread");
  }

  /**
   * @test
   */
  public function a_user_can_browse_threads()
  {
    $this->get('/threads')
      ->assertSee($this->thread->title);
  }

  /**
   *@test
   */
  public function a_user_can_read_single_thread()
  {
    $this->get($this->thread->path())
      ->assertSee($this->thread->title);
  }

//  /**
//   *@test
//   */
//  public function a_user_can_read_replies_that_are_associated_with_thread()
//  {
//    $reply = create("App\Reply",["thread_id" => $this->thread->id]);
//    $this->get($this->thread->path())
//      ->assertSee($reply->body);
//  }
/**
   *@test
   */
  public function a_user_can_filter_threads_according_to_channel()
  {
    $this->withoutExceptionHandling();
    $channel = create('App\Channel');
    $threadInChannel = create('App\Thread',['channel_id'=>$channel->id]);
    $threadNotInChannel = create('App\Thread');

    $this->get('/threads/'.$channel->slug)
      ->assertSee($threadInChannel->title)
      ->assertDontSee($threadNotInChannel->title);
  }

    /**
     * @test
     */
    public function a_user_can_filter_threads_by_any_username()
    {
        $this->signIn(create('App\User',['name'=>'attar']));
        $threadByAttar = Create('App\Thread',['user_id'=>auth()->user()->id]);
        $threadNotByAttar = Create('App\Thread');

        $this->get('/threads?by=attar')
            ->assertSee($threadByAttar->title)
            ->assertDontSee($threadNotByAttar->title);

    }


    /**
     * @test
     */
    public function a_user_can_filter_threads_by_popularity()
    {

        $threadWith5Replies = create('App\Thread');
        $threadWith3Replies = create('App\Thread');
        $threadWith0Replies = $this->thread;
        create('App\Reply',['thread_id'=>$threadWith5Replies->id],5);
        create('App\Reply',['thread_id'=>$threadWith3Replies->id],3);
        $response = $this->getJson('threads?popular=1')->json();
        $this->assertEquals([5,3,0],array_column($response['data'],'replies_count'));
    }
    /**
     * @test
     */
    public function a_user_can_filter_threads_by_those_that_are_unanswered()
    {

        $thread = create('App\Thread');

        create('App\Reply',['thread_id'=>$thread->id]);
        $response = $this->getJson('threads?unanswered=1')->json();
        $this->assertCount(1,$response['data']);
    }

    /**
     * @test
     */
    public function a_user_can_request_all_replies_for_a_given_thread(){
        $thread = create('App\Thread');
        create('App\Reply',['thread_id'=>$thread->id],2);
        $response = $this->getJson($thread->path().'/replies')->json();
        $this->assertCount(2,$response['data']);
        $this->assertEquals(2,$response['total']);
    }

}
